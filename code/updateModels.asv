function [Mask, LocalWindows, ColorModels, ShapeConfidences] = ...
    updateModels(...
        NewLocalWindows, ...
        LocalWindows, ...
        CurrentFrame, ...
        warpedMask, ...
        warpedMaskOutline, ...
        WindowWidth, ...
        ColorModels, ...
        ShapeConfidences, ...
        ProbMaskThreshold, ...
        fcutoff, ...
        SigmaMin, ...
        R, ...
        A ...
    )
% UPDATEMODELS: update shape and color models, and apply the result to generate a new mask.
% Feel free to redefine this as several different functions if you prefer.


%variables
windows = NewLocalWindows;
K = rgb2lab(CurrentFrame);
Pf = {};


% calculate shapecnfidence from the new localwindows using previous bw and pc
tmpShapeConf = initShapeConfidences(NewLocalWindows,ColorModels,WindowWidth,SigmaMin,A,fcutoff,R);

fg_thresh = 0.75;
bg_thresh = 0.2;
for j = 1 : size(LocalWindows,1)
    

    coor = windows(j,:);
    x= coor(1);
    y = coor(2);
    ymin = y-round(WindowWidth/2);
    xmin = x-round(WindowWidth/2);
    window = imcrop(K,[xmin ymin  WindowWidth-1 WindowWidth-1]);
    mask = imcrop(warpedMask,[xmin ymin  WindowWidth-1 WindowWidth-1]);
    maskOutline = imcrop(warpedMaskOutline,[xmin ymin  WindowWidth-1 WindowWidth-1]);


    L_ = window(:,:,1);
    a_ = window(:,:,2);
    b_ = window(:,:,3);
    Kwindows_flat = [reshape(L_,[WindowWidth^2 1]) reshape(a_,[WindowWidth^2 1]) reshape(b_,[WindowWidth^2 1])];
    L_fg = L_(mask ==255 & tmpShapeConf{j}.ColorConfidence > fg_thresh);
    a_fg = a_(mask ==255 & tmpShapeConf{j}.ColorConfidence> fg_thresh);
    b_fg = b_(mask ==255 & tmpShapeConf{j}.ColorConfidence> fg_thresh);
    
    X_fg = [L_fg a_fg b_fg];
    X_fg2 = [X_fg; ColorModels{j}.X_fg];
    
    L_bg = L_(mask == 0 & tmpShapeConf{j}.ColorConfidence< bg_thresh);
    a_bg = a_(mask == 0 & tmpShapeConf{j}.ColorConfidence< bg_thresh);
    b_bg = b_(mask == 0 & tmpShapeConf{j}.ColorConfidence< bg_thresh);
    X_bg = [L_bg a_bg b_bg];
    X_bg2 = [X_bg; ColorModels{j}.X_bg];


%%
%if(size(X_fg2, 1) > size(X_fg2, 2) && size(X_bg2, 1) > size(X_bg2, 2))
if (size(X_fg,1)<size(ColorModels{j}.X_fg,1))
    X_fg = ColorModels{j}.X_fg;
end
if (size(X_bg,1)<3)
    X_bg = ColorModels{j}.X_bg;
end
iter = 100;
converged = false;
while(converged == false)
iter = iter + 100;
options = statset('MaxIter',iter);
GMM_fg = fitgmdist(X_fg,3,'RegularizationValue',0.001, 'Options', options);
GMM_bg = fitgmdist(X_bg,3,'RegularizationValue',0.001, 'Options', options);
%GMM_fg = fitgmdist(X_fg2,3,'RegularizationValue',0.001, 'Options', options);
%GMM_bg = fitgmdist(X_bg2,3,'RegularizationValue',0.001, 'Options', options);

converged = GMM_bg.Converged && GMM_fg.Converged;
end


f = pdf(GMM_fg,Kwindows_flat);
b = pdf(GMM_bg,Kwindows_flat);
% 
f_ = reshape(f, [WindowWidth WindowWidth]);
b_ = reshape(b, [WindowWidth WindowWidth]);

fb = f_ ./ (f_ + b_);

if (numel(find(fb > ProbMaskThreshold)) < numel(find(ColorModels{j}.ColorModel > ProbMaskThreshold))) 
    ColorModels{j}.ColorModel = fb;

    D = bwdist(maskOutline);
    Wc = exp(-(D.^2)/((WindowWidth)/2)^2);
    Lt = double(mask/255);
   
    Fc_top = sum(sum(abs(Lt-fb) .* Wc));
    Fc_bot = sum(sum(Wc));
    ColorModels{j}.ColorConfidence = 1 - (Fc_top/Fc_bot);
   % sprintf(['window ' num2str(j) ' updated'])
    ColorModels{j}.X_fg = X_fg;
    ColorModels{j}.X_bg = X_bg;

end

if fcutoff < ColorModels{j}.ColorConfidence
    SigmaS = SigmaMin + A*(ColorModels{j}.ColorConfidence - fcutoff)^R;
else
    SigmaS = SigmaMin;
end
D = bwdist(maskOutline);
ColorModels{j}.ShapeModel  = 1 - exp(-(D.^2)/((SigmaS)^2));




%combine 
    fb= ColorModels{j}.ColorModel;
    Lt = double(mask/255);
    pf = (ColorModels{j}.ShapeModel .* Lt) + ((1-ColorModels{j}.ShapeModel).*fb); 
    Pf{j} = pf;


end

canvasF = zeros(size(rgb2gray(CurrentFrame)));
canvasSet = {};
eps = 0.1;
center = zeros(WindowWidth, WindowWidth);
center(WindowWidth, WindowWidth) = 1;
center = bwdist(center);
canvasSet = {};

for i=1:size(LocalWindows,1)
    canvas = zeros(size(rgb2gray(CurrentFrame)));
    coor = windows(i,:);
    x= coor(1);
    y = coor(2);

    Y = round(y-round(WindowWidth/2));
    X = round(x-round(WindowWidth/2));
    P = Pf{i};
    dist = abs(center + eps).^-1;
    pF = (P.*dist)./dist;
    pF(isnan(pF))=0;
    mask = (pF>ProbMaskThreshold);
    canvas(Y:Y+WindowWidth-1,X:X+WindowWidth-1) =mask;
    canvasSet{i} = canvas;
    bw= bwperim(mask);
    ColorModels{i}.BoundryEdge = bw;
   
end


for i = 1:numel(canvasSet)
   canvasF = canvasF + canvasSet{i};
   
end

%grayMask = mat2gray(canvasF);
%t = WindowWidth/2;
%for i=1:size(LocalWindows,1)
%   pos = NewLocalWindows(1,:);
%   X = round(pos(1));
%   Y = round(pos(2));
%   grayMask(Y-t:Y+t,X-t:X+t) = 0;  
%   imshow(grayMask);
%end

%canvasF(isnan(canvasF)) = 0;
%canvasF = canvasF + grayMask
mask_outline = bwperim(canvasF,4);
%fmask =imfill(canvasF,'holes');
imshow(mask_outline)
fmask =imfill(mask_outline,'holes');

R = CurrentFrame(:,:,1);
G = CurrentFrame(:,:,2);
B = CurrentFrame(:,:,3);

R(fmask == 0) = 0;
G(fmask == 0) = 0;
B(fmask == 0) = 0;

final = cat(3,G,B);
final = cat(3,R,final);

Mask = fmask;
image = final;
imshow(image)

%merge 
LocalWindows = NewLocalWindows;


end

